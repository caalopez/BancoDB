import pandas as pd
import streamlit as st
import utilidades as util
from PIL import Image
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
import plotly.figure_factory as ff
from PIL import Image
import pdfplumber
import plotly.express as px
from prophet import Prophet
import numpy as np




#df = pd.read_csv("/Data/bancoDB_limpieza-2.csv")
#df = df.drop(columns=['Unnamed: 0'])

# def generarMenu():
#     with st.sidebar:
#         col1, col2 = st.columns(2)
#         with col1:
#             image = Image.open("media/logo.png")
#             st.image(image, use_container_width=False)
#         with col2:
#             st.header('UnDato')

#         st.page_link("pages/inicio.py", label='Inicio')
#         st.page_link("pages/exploracion.py", label='Exploracion de datos')
#         st.page_link("pages/analisis_temporal.py", label='Analisis Temporal')





def calcular_rango_fechas(df):
    """Calcula los valores m√≠nimos y m√°ximos de las fechas en el DataFrame."""
    min_donacion = df['FECHA DONACION'].min()
    max_donacion = df['FECHA DONACION'].max()
    #min_nac = df['FECHA NACIMIENTO'].min()
    #max_nac = df['FECHA NACIMIENTO'].max()
    
    return min_donacion, max_donacion #min_nac, max_nac


def procesar_donaciones(df):
    """Convierte fechas y cuenta donaciones por mes y a√±o."""
    df["FECHA DONACION"] = pd.to_datetime(df["FECHA DONACION"])
    df["A√ëO"] = df["FECHA DONACION"].dt.year
    df["MES"] = df["FECHA DONACION"].dt.month

    # Agrupar por a√±o y mes
    donaciones_por_mes = df.groupby(["A√ëO", "MES"]).size().reset_index(name="CANTIDAD")

    # Crear columna de fecha para el gr√°fico
    donaciones_por_mes["FECHA"] = pd.to_datetime(donaciones_por_mes["A√ëO"].astype(str) + "-" + donaciones_por_mes["MES"].astype(str))

    return donaciones_por_mes


def graficar_donaciones(donaciones_por_mes):
    """Genera un gr√°fico de tendencia de donaciones."""
    fig = px.line(
        donaciones_por_mes, x="FECHA", y="CANTIDAD", 
        markers=True, title="Tendencia de Donaciones en el Tiempo",
        labels={"FECHA": "Fecha", "CANTIDAD": "N√∫mero de Donaciones"},
        template="plotly_dark"
    )
    # Centrar el t√≠tulo del gr√°fico
    fig.update_layout(title_x=0.4)

    # Mostrar en Streamlit
    st.plotly_chart(fig)


def crear_histograma(df):
    fig = px.histogram(df, x="EDAD", nbins=50, marginal="box", text_auto = True)
    fig.update_layout(
        title={
            'text': "Distribuci√≥n de Edades de los Donantes",
            'x': 0.5,  # Centrar el t√≠tulo
            'xanchor': 'center',
            'font': {'size': 24}  # Aumentar el tama√±o del t√≠tulo
        },
        xaxis_title="Edad del Donante",
        yaxis_title="Cantidad de Donantes"
    )
    return fig

def mes_histograma(df):
    
    df.groupby("MES").size().reset_index(name="CANTIDAD")
    fig = px.histogram(df, x="MES", nbins=50, marginal="box", title="Distribuci√≥n de Mes de los Donantes", text_auto=True)
    fig.update_layout(
        title={
            'text': "Distribuci√≥n de Mes de donaci√≥n ",
            'x': 0.5,  # Centrar el t√≠tulo
            'xanchor': 'center',
            'font': {'size': 24}  # Aumentar el tama√±o del t√≠tulo
        },
        xaxis_title="Edad del Donante",
        yaxis_title="Cantidad de Donantes"
    )
    return fig


def calcular_min_max(df, EDAD):
    """Calcula los valores m√≠nimo y m√°ximo de una columna en un DataFrame."""
    min_val = df[EDAD].min()
    max_val = df[EDAD].max()
    return min_val, max_val

def mostrar_boxplot(df):


    fig = go.Figure()
    fig.add_trace(go.Box(
        y=df['EDAD'],
        name="Distribuci√≥n de Edades",
        boxpoints=False,  # No muestra los puntos
        marker_color="lightskyblue"  # Color azul claro para el boxplot
    ))

    # Configurar m√°rgenes y tama√±o para centrar
    fig.update_layout(
        width=500,  # Ajusta el ancho para centrar mejor
        height=500,  # Ajusta la altura
        margin=dict(l=50, r=50, t=60, b=60)  # M√°rgenes equilibrados
    )

    # Mostrar el gr√°fico centrado en Streamlit
    col1, col2, col3 = st.columns([1, 1, 1])  # Columnas, la del centro es la m√°s grande
    with col2:
        st.plotly_chart(fig, use_container_width=False)

def extract_text_with_bold(pdf_path):
    """Extrae texto de un PDF e intenta identificar palabras en negrita."""
    try:
        text = ""
        with pdfplumber.open(pdf_path) as pdf:
            for page in pdf.pages:
                words = page.extract_words()
                if words:
                    for word in words:
                        font = word.get("fontname", "").lower()
                        text += f"**{word['text']}** " if "bold" in font else f"{word['text']} "
                text += "\n\n"  # Salto de l√≠nea entre p√°ginas
        return text
    except FileNotFoundError:
        return None


def detectar_outliers(df):
    # Calcular cuartiles y rango intercuart√≠lico (IQR)
    Q1 = df["EDAD"].quantile(0.25)
    Q3 = df["EDAD"].quantile(0.75)
    IQR = Q3 - Q1

    # L√≠mites para detectar outliers
    limite_inferior = Q1 - 1.5 * IQR
    limite_superior = Q3 + 1.5 * IQR

    # Filtrar valores at√≠picos
    outliers = df[(df["EDAD"] < limite_inferior) | (df["EDAD"] > limite_superior)]

    # Mostrar el c√≥digo en Streamlit
    codigo = '''Q1 = bancoDB["EDAD"].quantile(0.25)
Q3 = bancoDB["EDAD"].quantile(0.75)
IQR = Q3 - Q1

# L√≠mites para detectar outliers
limite_inferior = Q1 - 1.5 * IQR
limite_superior = Q3 + 1.5 * IQR

outliers = bancoDB[(bancoDB["EDAD"] < limite_inferior) | (bancoDB["EDAD"] > limite_superior)]
print("N√∫mero de valores at√≠picos:", len(outliers))'''

    st.markdown("### üìú **Busqueda valores atipicos:**")
    st.code(codigo, language='python')

    # Mostrar el resultado en Streamlit
    st.markdown("### üìä **N√∫mero de valores at√≠picos:**")
    st.write(f"üîç **{len(outliers)} valores at√≠picos encontrados**")

    # Opcional: Mostrar los valores at√≠picos detectados
    if not outliers.empty:
        st.write("üìã **Valores at√≠picos detectados:**")
        st.dataframe(outliers)

def conteo_genero(df):
    # Calcular el conteo y la proporci√≥n de cada g√©nero
    conteo_genero = df['GENERO'].value_counts()

    # Crear gr√°fico de pastel con Plotly
    fig = px.pie(
        conteo_genero, 
        values=conteo_genero.values, 
        names=conteo_genero.index,
        title="Distribuci√≥n por G√©nero",
        color=conteo_genero.index,
        color_discrete_map={'M': 'blue', 'F': 'pink'}  # Ajusta los colores seg√∫n las clases presentes
    )

    fig.update_traces(textinfo='percent+label')  # Mostrar porcentaje y etiqueta

    # Ajustar el dise√±o
    fig.update_layout(
        title={'text': "Distribuci√≥n por G√©nero", 'x': 0.45, 'xanchor': 'center', 'font': {'size': 24}}
    )

    # Mostrar en Streamlit
    st.plotly_chart(fig)

def promedio_edad(df):

    # Calcular el promedio de edad por g√©nero
    edad_promedio_genero = df.groupby('GENERO')['EDAD'].mean().reset_index()

    # Crear el gr√°fico de barras con barras m√°s delgadas
    fig = px.bar(
        edad_promedio_genero, 
        x='GENERO', 
        y='EDAD', 
        color='GENERO', 
        text=edad_promedio_genero['EDAD'].round(1),  # Mostrar valores redondeados
        title='Edad Promedio por G√©nero',
        labels={'EDAD': 'Edad Promedio', 'GENERO': 'G√©nero'},
        color_discrete_sequence=['pink', 'blue']  # Colores personalizados
    )

    # Ajustar el dise√±o para hacer las barras m√°s delgadas
    fig.update_traces(textposition='outside', textfont_size=12)
    fig.update_layout(xaxis_tickangle=0.5, showlegend=False, bargap=0.5)  # Aumentar bargap hace las barras m√°s delgadas

    # Mostrar el gr√°fico en Streamlit
    st.plotly_chart(fig)


def genero_donante(df):
    # Crear tabla de contingencia
    contingencia_genero_donante = pd.crosstab(df['GENERO'], df['TIPO DONANTE'])
    
    # Convertir la tabla de contingencia a un DataFrame adecuado para Plotly
    df_plotly = contingencia_genero_donante.T.reset_index().melt(id_vars='TIPO DONANTE', var_name='G√©nero', value_name='Cantidad')
    
    # Crear la gr√°fica de barras agrupadas con etiquetas
    fig = px.bar(df_plotly, 
                 x='TIPO DONANTE', 
                 y='Cantidad', 
                 color='G√©nero', 
                 barmode='group', 
                 text='Cantidad',  # Agregar etiquetas con valores
                 color_discrete_map={'MASCULINO': 'blue', 'FEMENINO': 'pink'})  # Colores personalizados
    
    # Configurar el dise√±o
    fig.update_layout(
        title=dict(text='Comparaci√≥n de G√©nero por Tipo de Donante', x=0),
        xaxis_title='Tipo de Donante',
        yaxis_title='N√∫mero de Donantes',
        xaxis_tickangle=-45,  # Rotar etiquetas para mejor lectura
        legend_title='G√©nero'
    )
    
    # Ajustar el tama√±o de las etiquetas sobre las barras
    fig.update_traces(textposition='outside', textfont_size=10)
    
    # Mostrar la figura en Streamlit
    st.plotly_chart(fig)   
    st.table(contingencia_genero_donante)

def genero_gruposanguineo(df):
     # Crear tabla de contingencia
    contingencia_genero_sanguineo = pd.crosstab(df['GENERO'], df['GRUPO SANGUINEO']).reset_index()

    # Convertir la tabla a formato largo (melt) para Plotly
    df_melted = contingencia_genero_sanguineo.melt(id_vars='GENERO', var_name='GRUPO SANGUINEO', value_name='CANTIDAD')

    # T√≠tulo de la aplicaci√≥n
    #st.title("An√°lisis de Donantes: G√©nero vs Grupo Sangu√≠neo")

    # Crear gr√°fico de barras
    fig = px.bar(
        df_melted, 
        x='GENERO', 
        y='CANTIDAD', 
        color='GRUPO SANGUINEO', 
        text='CANTIDAD',
        title='Distribuci√≥n de Donantes por G√©nero y Grupo Sangu√≠neo',
        labels={'CANTIDAD': 'N√∫mero de Donantes', 'GENERO': 'G√©nero'},
        barmode='group',
        color_discrete_sequence=['#636EFA', '#EF553B', '#00CC96', '#2CA02C']
    )

    # Ajustar dise√±o
    fig.update_traces(textposition='outside', textfont_size=10)
    fig.update_layout(xaxis_tickangle=0, bargap=0.3)

    # Mostrar gr√°fico en Streamlit
    st.plotly_chart(fig)


def grafico_diferido(df):
    #st.title('Frecuencia de Tipos de Diferido')
    
    # Contar la frecuencia de cada tipo de diferido
    diferido_counts = df['TIPO DE DIFERIDO'].value_counts().reset_index()
    diferido_counts.columns = ['TIPO DE DIFERIDO', 'CANTIDAD']
    
    # Crear gr√°fico de barras
    fig = px.bar(diferido_counts, 
                 x='TIPO DE DIFERIDO', 
                 y='CANTIDAD', 
                 text='CANTIDAD',
                 title='Frecuencia de Tipos de Diferido',
                 labels={'TIPO DE DIFERIDO': 'Tipo de Diferido', 'CANTIDAD': 'N√∫mero de Donantes'},
                 color='TIPO DE DIFERIDO',  # Color por categor√≠a
                 color_discrete_sequence=px.colors.qualitative.Set2)
    
    fig.update_traces(textposition='outside')
    fig.update_layout(xaxis_tickangle=-45, bargap=0.3)
    
    # Mostrar gr√°fico en Streamlit
    st.plotly_chart(fig)

def grafico_donante(df):
    #st.title('Frecuencia de Tipos de Donante')
    
    # Contar la frecuencia de cada tipo de donante
    donante_counts = df['TIPO DONANTE'].value_counts().reset_index()
    donante_counts.columns = ['TIPO DONANTE', 'CANTIDAD']
    
    # Crear gr√°fico de barras
    fig = px.bar(donante_counts, 
                 x='TIPO DONANTE', 
                 y='CANTIDAD', 
                 text='CANTIDAD',
                 title='Frecuencia de Tipos de Donante',
                 labels={'TIPO DONANTE': 'Tipo de Donante', 'CANTIDAD': 'N√∫mero de Donantes'},
                 color='TIPO DONANTE',  
                 color_discrete_sequence=px.colors.qualitative.Pastel1)
    
    fig.update_traces(textposition='outside')
    fig.update_layout(xaxis_tickangle=-45, bargap=0.3)
    
    # Mostrar gr√°fico en Streamlit
    st.plotly_chart(fig)

def grafico_donacion(df):
    #st.title('Frecuencia de Tipos de Donaci√≥n')
    
    # Contar la frecuencia de cada tipo de donaci√≥n
    donacion_counts = df['TIPO DE DONACION'].value_counts().reset_index()
    donacion_counts.columns = ['TIPO DE DONACION', 'CANTIDAD']
    
    # Crear gr√°fico de barras
    fig = px.bar(donacion_counts, 
                 x='TIPO DE DONACION', 
                 y='CANTIDAD', 
                 text='CANTIDAD',
                 title='Frecuencia de Tipos de Donaci√≥n',
                 labels={'TIPO DE DONACION': 'Tipo de Donaci√≥n', 'CANTIDAD': 'N√∫mero de Donantes'},
                 color='TIPO DE DONACION',  
                 color_discrete_sequence=px.colors.qualitative.Dark2)
    
    fig.update_traces(textposition='outside')
    fig.update_layout(xaxis_tickangle=-45, bargap=0.3)
    
    # Mostrar gr√°fico en Streamlit
    st.plotly_chart(fig)


def donanteVSdonacion(df):
    # Crear tabla de contingencia
    x = pd.crosstab(df['TIPO DONANTE'], df['GRUPO SANGUINEO']).reset_index()
    df_melted = x.melt(id_vars='TIPO DONANTE', var_name='GRUPO SANGUINEO', value_name= 'CANTIDAD')


    st.subheader("Tabla de contingencia en formato largo:")
    st.dataframe(df_melted)

    return df_melted  # Retorna el DataFrame si necesitas usarlo en otro lugar


def grupos_sanguineos(df):
    # Contar la cantidad de cada grupo sangu√≠neo
    grupo_sanguineo_counts = df['GRUPO SANGUINEO'].value_counts().reset_index()
    grupo_sanguineo_counts.columns = ['Grupo Sangu√≠neo', 'Cantidad']
    
    # Crear gr√°fico de barras
    fig = px.bar(grupo_sanguineo_counts, 
                 x='Grupo Sangu√≠neo', 
                 y='Cantidad', 
                 text='Cantidad',
                 color='Grupo Sangu√≠neo',
                 title="Distribuci√≥n de Grupos Sangu√≠neos")
    
    # Ajustar etiquetas
    fig.update_traces(textposition='outside')
    fig.update_layout(xaxis_title="Grupo Sangu√≠neo", yaxis_title="N√∫mero de Donantes")
    
    # Mostrar gr√°fico en Streamlit
    st.plotly_chart(fig)


def grafico_rh(df):
    # Crear tabla de contingencia
    contingencia_genero_sanguineo = pd.crosstab(df['GENERO'], df['GRUPO SANGUINEO']).reset_index()
    
    # Crear gr√°fico de barras con una barra separada por grupo sangu√≠neo
    fig = px.bar(contingencia_genero_sanguineo.melt(id_vars='GENERO', var_name='Grupo Sangu√≠neo', value_name='Cantidad'),
                 x='Grupo Sangu√≠neo', 
                 y='Cantidad', 
                 color='GENERO',
                 title="Grupo Sangu√≠neo por G√©nero",
                 labels={'Cantidad': 'N√∫mero de Donantes', 'GENERO': 'G√©nero'},
                 barmode='group')
    
    # Mostrar gr√°fico en Streamlit
    st.plotly_chart(fig)

def gruposanguineoVSdonacion(df):
    # Crear tabla de contingencia
    contingencia_sangre_donacion = pd.crosstab(df['GRUPO SANGUINEO'], df['TIPO DE DONACION']).reset_index()
    
    # Crear gr√°fico de barras apiladas
    fig = px.bar(contingencia_sangre_donacion.melt(id_vars='GRUPO SANGUINEO', var_name='Tipo de Donaci√≥n', value_name='Cantidad'),
                 x='GRUPO SANGUINEO', 
                 y='Cantidad', 
                 color='Tipo de Donaci√≥n',
                 title="Grupo Sangu√≠neo vs. Tipo de Donaci√≥n",
                 labels={'Cantidad': 'N√∫mero de Donantes', 'GRUPO SANGUINEO': 'Grupo Sangu√≠neo'},
                 barmode='stack')
    
    # Mostrar gr√°fico en Streamlit
    st.plotly_chart(fig)

def edad_por_tipo_donacion(df):
    st.title("Distribuci√≥n de edad seg√∫n tipo de donaci√≥n")
    
    # Crear gr√°fico de caja
    fig = px.box(df, 
                 x="TIPO DE DONACION", 
                 y="EDAD", 
                 color="TIPO DE DONACION",
                 #title="Distribuci√≥n de Edad seg√∫n Tipo de Donaci√≥n",
                 width=900, height=600)
    
    # Mostrar gr√°fico en Streamlit
    st.plotly_chart(fig)

def mostrar_grafico_grupo_rh(df):
    # Crear una nueva columna que combine Grupo Sangu√≠neo y Rh
    df['GRUPO_RH'] = df['GRUPO SANGUINEO'] + " " + df['ANTIGENO RH-D']
    
    # Contar la cantidad de cada combinaci√≥n de Grupo Sangu√≠neo + Rh
    grupo_rh_counts = df['GRUPO_RH'].value_counts().reset_index()
    grupo_rh_counts.columns = ['Grupo Sangu√≠neo + Rh', 'Cantidad']
    
    # Crear gr√°fico de barras
    fig = px.bar(grupo_rh_counts, 
                 x='Grupo Sangu√≠neo + Rh', 
                 y='Cantidad', 
                 text='Cantidad',
                 color='Grupo Sangu√≠neo + Rh',
                 title="Distribuci√≥n de Grupos Sangu√≠neos + Rh")
    
    # Ajustar etiquetas
    fig.update_traces(textposition='outside')
    fig.update_layout(xaxis_title="Grupo Sangu√≠neo + Rh", yaxis_title="N√∫mero de Donantes")
    
    # Mostrar gr√°fico en Streamlit
    st.plotly_chart(fig)

def mostrar_grafico_grupo_rh_genero(df):
    # Crear tabla de contingencia
    contingencia_grupo_rh_genero = pd.crosstab(df['GENERO'], df['GRUPO_RH'])
    
    # Convertir la tabla en un formato adecuado para Plotly
    contingencia_grupo_rh_genero = contingencia_grupo_rh_genero.reset_index()
    df_melted = contingencia_grupo_rh_genero.melt(id_vars=['GENERO'], var_name='GRUPO_RH', value_name='Cantidad')
    
    # Crear gr√°fico de barras separadas por Grupo Sangu√≠neo + Rh
    fig = px.bar(df_melted, 
                 x='GENERO', 
                 y='Cantidad', 
                 color='GRUPO_RH',
                 title="Grupo Sangu√≠neo + Rh por G√©nero",
                 labels={'Cantidad': 'N√∫mero de Donantes', 'GENERO': 'G√©nero'},
                 barmode='group')
    
    # Mostrar gr√°fico en Streamlit
    st.plotly_chart(fig)


def lugar_donacion(df):
    #st.title("Frecuencia de Donaciones por Lugar")
    
    # Contar la cantidad de donaciones por lugar
    lugares_counts = df['LUGAR DE DONACION'].value_counts().reset_index()
    lugares_counts.columns = ['Lugar de Donaci√≥n', 'Cantidad']
    
    # Crear gr√°fico de barras
    fig = px.bar(lugares_counts, 
                 x='Lugar de Donaci√≥n', 
                 y='Cantidad', 
                 text='Cantidad',
                 color='Lugar de Donaci√≥n',
                 title="Frecuencia de Donaciones por Lugar")
    
    # Ajustar etiquetas
    fig.update_traces(textposition='outside')
    fig.update_layout(xaxis_title="Lugar de Donaci√≥n", 
                      yaxis_title="N√∫mero de Donaciones", 
                      xaxis={'categoryorder':'total descending'})
    
    # Mostrar gr√°fico en Streamlit
    st.plotly_chart(fig)

def donante_lugar_donacion(df):
    #st.title("Distribuci√≥n de Tipo de Donante por Lugar de Donaci√≥n")
    # Crear tabla de contingencia
    contingencia_lugar_donante = pd.crosstab(df['LUGAR DE DONACION'], df['TIPO DONANTE'])
    
    # Crear gr√°fico de barras agrupadas
    fig = px.bar(contingencia_lugar_donante, 
                 x=contingencia_lugar_donante.index, 
                 y=contingencia_lugar_donante.columns, 
                 title="Distribuci√≥n de Tipo de Donante por Lugar de Donaci√≥n",
                 labels={'value': 'N√∫mero de Donantes', 'LUGAR DONACION': 'Lugar de Donaci√≥n'},
                 barmode='group')
    
    # Mostrar gr√°fico en Streamlit
    st.plotly_chart(fig)


def grafico_grupo_sanguineo_por_lugar(df):
    #st.title("Distribuci√≥n de Grupo Sangu√≠neo por Lugar de Donaci√≥n")
    # Crear tabla de contingencia
    contingencia_lugar_sangre = pd.crosstab(df['LUGAR DE DONACION'], df['GRUPO SANGUINEO'])
    
    # Crear gr√°fico de barras agrupadas
    fig = px.bar(contingencia_lugar_sangre, 
                 x=contingencia_lugar_sangre.index, 
                 y=contingencia_lugar_sangre.columns, 
                 title="Distribuci√≥n de Grupo Sangu√≠neo por Lugar de Donaci√≥n",
                 labels={'value': 'N√∫mero de Donantes', 'LUGAR DONACION': 'Lugar de Donaci√≥n'},
                 barmode='group')
    
    # Mostrar gr√°fico en Streamlit
    st.plotly_chart(fig)

def edad_por_tipo_donante(df):
    #st.title("Distribuci√≥n de Edad seg√∫n Tipo de Donante")
    
    # Crear gr√°fico de caja
    fig = px.box(df, 
                 x="TIPO DONANTE", 
                 y="EDAD", 
                 color="TIPO DONANTE",
                 title="Distribuci√≥n de Edad seg√∫n Tipo de Donante"
                 #width=400,height=500)
            )
    # Mostrar gr√°fico en Streamlit
    st.plotly_chart(fig)

def predecir_donaciones(df):
    # Convertir fechas
    df["FECHA DONACION"] = pd.to_datetime(df["FECHA DONACION"])
    
    # Contar donaciones por mes
    donaciones_por_mes = df.resample("ME", on="FECHA DONACION").size().reset_index()
    donaciones_por_mes.columns = ["ds", "y"]  # Prophet usa columnas 'ds' (fecha) y 'y' (valor)
    
    # Crear y entrenar el modelo
    modelo = Prophet()
    modelo.fit(donaciones_por_mes)
    
    # Definir la fecha inicial para predicciones (enero 2025)
    fecha_inicio_prediccion = pd.to_datetime("2025-01-01")
    
    # Calcular cu√°ntos meses predecir desde la √∫ltima fecha del dataset hasta 2027 (3 a√±os de predicci√≥n)
    ultima_fecha = donaciones_por_mes["ds"].max()
    meses_a_predecir = ((2027 - 2025) * 12) + 12  # Hasta diciembre de 2027
    
    # Generar fechas futuras a partir de enero 2025
    futuro = modelo.make_future_dataframe(periods=meses_a_predecir, freq="ME")
    futuro = futuro[futuro["ds"] >= fecha_inicio_prediccion]  # Filtrar solo desde enero 2025
    
    # Hacer predicciones
    predicciones = modelo.predict(futuro)
    
    # Gr√°fica con Plotly en Streamlit
    fig = px.line(predicciones, x="ds", y="yhat", title="Predicci√≥n de Donaciones desde Enero 2025")
    
    # Mostrar la gr√°fica en Streamlit
    st.plotly_chart(fig)
    
    return predicciones

def calcular_rmse(modelo, donaciones_por_mes):
    # Obtener predicciones en el rango del conjunto de entrenamiento
    predicciones_entrenamiento = modelo.predict(donaciones_por_mes)

    # Extraer valores reales y predichos
    y_real = donaciones_por_mes["y"].values
    y_pred = predicciones_entrenamiento["yhat"].values

    # Calcular RMSE
    rmse = np.sqrt(mean_squared_error(y_real, y_pred))

    return rmse


def explorar_datos(df):
    st.header("üîç Exploraci√≥n de Datos")

    # Mostrar una muestra de los primeros registros
    st.write("### üìã Ejemplo de Registros")
    st.dataframe(df.head(10))  # Muestra las primeras 10 filas

    # Descripci√≥n de las variables
    st.write("### üìä Variables en el Dataset")
    st.markdown("""
    - üìÖ **Fecha de donaci√≥n**: D√≠a en que se realiz√≥ la donaci√≥n.
    - üìÖ **Fecha de nacimiento**: Fecha de nacimiento del donante.
    - üî¢ **Edad**: Edad del donante.
    - üöª **G√©nero**: Masculino o Femenino.
    - ‚úÖ **Tipo de diferido**: Si la donaci√≥n fue aceptada o no.
    - ü©∏ **Tipo de donante**: Voluntario, habitual, por reposici√≥n, etc.
    - ü©∏ ** Tipo de donacion**: Sangre total o Aferesis
    - ü©∏ ** Grupo Sanguineo**: A - B - O - AB
    - ü©∏ ** Antigeno RH-D**: Positivo o Negativo
    - üö© ** Lugar de Donaci√≥n**: Sede o Campa√±a
    """)

    # Mostrar dimensi√≥n del DataFrame
    filas, columnas = df.shape
    st.write("### üìè Tama√±o del Dataset")
    st.markdown(f"üìå **{filas}** filas: Representa el n√∫mero de registros de donantes.")
    st.markdown(f"üìå **{columnas}** columnas: Representa la cantidad de variables recopiladas.")
    st.success(f"Dimensi√≥n DF (**{filas}, {columnas}**)")

    # Posibles an√°lisis a realizar
    st.write("### üìä Posibles An√°lisis a Realizar")
    st.markdown("""
    - üìà **Distribuci√≥n por g√©nero**: ¬øHay m√°s donantes hombres o mujeres?
    - üè• **Frecuencia de donaciones**: ¬øCu√°ntos donantes habituales vs. primera vez?
    - ‚è≥ **Edad de los donantes**: ¬øCu√°l es el rango m√°s com√∫n?
    """)

def distribucion_datos():
    st.subheader("1Ô∏è‚É£ Tendencia de Donaciones en el Tiempo")
    st.markdown("""
    **üìä An√°lisis:**
    - Se observa variabilidad significativa en el n√∫mero de donaciones a lo largo del tiempo.
    - Existen picos de donaciones en algunos meses, seguidos de ca√≠das notables.
    - Hay una reducci√≥n dr√°stica en ciertos periodos, lo que podr√≠a estar relacionado con factores estacionales, campa√±as de donaci√≥n o eventos de salud p√∫blica.
    - Sugiere que la variabilidad responde a patrones de comportamiento recurrentes.
    - Desde principios de 2022 hasta 2024, la cantidad de donaciones no muestra tendencia creciente o decreciente, sino m√°s bien fluctuaciones peri√≥dicas.
    
    **üîé Posibles Causas:**
    - Campa√±as de donaci√≥n que impulsan aumentos en ciertos meses.
    - Eventos espec√≠ficos como emergencias sanitarias pueden alterar la tendencia.
    """)
    
def distribucion2_datos():
    st.subheader("2Ô∏è‚É£ Distribuci√≥n del Mes de Donaci√≥n ")
    st.markdown("""
    **üìä An√°lisis:**
    - Este gr√°fico muestra la cantidad de donaciones por mes en un per√≠odo determinado.
    - **Meses con m√°s donaciones:** Parece haber picos en enero y agosto, con valores cercanos a 1,300 donaciones.
    - **Meses con menos donaciones:** Se observan valores m√°s bajos en diciembre (aproximadamente 719 donaciones).
    - El gr√°fico de caja y bigotes en la parte superior indica una dispersi√≥n de los datos con posibles valores at√≠picos.
    
    **üîé Posibles Causas:**
    - Enero y agosto suelen ser meses de campa√±as intensivas de donaci√≥n en muchas regiones.
    - Diciembre podr√≠a tener menos donaciones debido a las festividades, vacaciones y menor disponibilidad de donantes.
    - La variabilidad puede estar influenciada por d√≠as festivos, eventos de salud p√∫blica o estrategias de promoci√≥n.
    
    **üìå Conclusi√≥n**
    - La tendencia de donaciones es fluctuante y no sigue un patr√≥n completamente predecible.
    - Se identifican meses con mayor y menor cantidad de donaciones, lo que podr√≠a ayudar a planificar estrategias 
    para incentivar la donaci√≥n en meses de baja participaci√≥n.
    """)

def analizar_edad():
    st.markdown("""
    # üìä An√°lisis

    **1. Forma de la Distribuci√≥n**  
    - Distribuci√≥n es asim√©trica a la derecha, es decir, hay m√°s donantes j√≥venes y la frecuencia disminuye progresivamente con la edad.
    - Se observa un pico de frecuencia entre los 25 y 35 a√±os, lo que indica que la mayor√≠a de donantes se encuentran en este rango.
    - Disminuci√≥n progresiva despu√©s de los 30 a√±os: A medida que la edad aumenta, la frecuencia de donaciones se reduce gradualmente.  

    **2. Medidas de Tendencia Central y Dispersi√≥n**  
    - El rango intercuart√≠lico (IQR) est√° entre 25 y 45 a√±os, lo que sugiere que la mayor√≠a de los donantes est√°n en este intervalo.
    - Media y mediana probablemente menores a 35 a√±os, dado que la mayor parte de los valores est√°n concentrados entre 18 y 35 a√±os.  
    - Amplio rango de edades: Se observan donaciones desde los 18 hasta los 60+ a√±os.  
    - Posibles valores at√≠picos: No hay evidencias claras de valores extremos, pero los datos en los extremos podr√≠an analizarse con un boxplot.  

    **3. Interpretaci√≥n Contextual**  
    - Mayor participaci√≥n de j√≥venes: Esto puede deberse a campa√±as de donaci√≥n dirigidas a estudiantes universitarios o j√≥venes trabajadores.  
    - Menor participaci√≥n en edades avanzadas: Posiblemente por restricciones m√©dicas o menor inter√©s en la donaci√≥n de sangre en personas mayores.  
    """)

def mostrar_conclusiones():
    st.header("Conclusiones Generales")
    
    st.write("\n‚úÖ **Mayor participaci√≥n femenina:** En todas las categor√≠as de donantes analizadas, la proporci√≥n de mujeres es superior a la de hombres.")
    st.write("\n‚úÖ **Edad promedio levemente mayor en hombres:** Aunque las diferencias no son grandes, los hombres tienen una edad promedio de donaci√≥n m√°s alta.")
    st.write("\n‚úÖ **Mayor cantidad de mujeres en donaci√≥n voluntaria:** Las mujeres est√°n m√°s presentes en la donaci√≥n voluntaria y en la de primera vez, lo que puede ser resultado de campa√±as espec√≠ficas o factores sociodemogr√°ficos.")
    st.write("\n‚úÖ **Distribuci√≥n relativamente balanceada:** A pesar de que las mujeres donan m√°s, la diferencia no es extrema, lo que indica una participaci√≥n considerable de ambos g√©neros.")
    
    st.subheader("üîé Recomendaciones para futuras estrategias de donaci√≥n")
    st.write("\nüìå **Incentivar la donaci√≥n masculina** en campa√±as espec√≠ficas, ya que su participaci√≥n es menor.")
    st.write("\nüìå **Analizar barreras m√©dicas o culturales** que puedan afectar la participaci√≥n de ciertos grupos de edad y g√©nero.")
    st.write("\nüìå **Fortalecer campa√±as para nuevos donantes**, especialmente en el grupo masculino, donde la diferencia es m√°s marcada.")

def donacion_analisis():
    st.title("ü©∏ An√°lisis de Donaci√≥n de Sangre")
    
    st.header("1. Frecuencia de Tipos de Donante")
    st.subheader("Mayor√≠a de donantes voluntarios")
    st.write("La mayor parte de los donantes pertenecen a la categor√≠a de voluntarios, lo que indica una alta concienciaci√≥n sobre la importancia de la donaci√≥n.")
    
    st.subheader("Pocos donantes dirigidos y aut√≥logos")
    st.write("Estas categor√≠as tienen una presencia m√≠nima, lo que puede deberse a que son casos espec√≠ficos (como aut√≥logos, que donan para s√≠ mismos).")
    
    st.header("2. Frecuencia de Tipos de Donaci√≥n")
    st.subheader("Predominio de donaci√≥n de sangre total")
    st.write("La gran mayor√≠a de las donaciones corresponden a sangre total, con m√°s de 11,000 donantes en comparaci√≥n con menos de 1,000 en af√©resis.")
    
    st.subheader("Baja participaci√≥n en af√©resis")
    st.write("La donaci√≥n por af√©resis es mucho menos frecuente, posiblemente por su duraci√≥n o por requerimientos espec√≠ficos.")
    
    st.header("3. Distribuci√≥n de Edad seg√∫n Tipo de Donaci√≥n")
    st.subheader("Mediana similar en ambos tipos de donaci√≥n")
    st.write("La edad mediana de los donantes es similar entre la donaci√≥n de sangre total y la af√©resis, rondando los 30-40 a√±os.")
    
    st.subheader("Rango amplio de edades")
    st.write("Ambos tipos de donaci√≥n presentan donantes desde aproximadamente 20 hasta m√°s de 60 a√±os, lo que indica una participaci√≥n diversa en t√©rminos de edad.")
    
    st.subheader("Distribuci√≥n homog√©nea")
    st.write("No hay diferencias marcadas entre ambos tipos de donaci√≥n en cuanto a la edad de los donantes.")

def gruposanguineo_conclusion():
    st.header("Conclusi√≥n General")
    st.write("‚úÖ **Predominio de donantes femeninas** en la mayor√≠a de los grupos sangu√≠neos.")
    st.write("‚úÖ **Grupos O+ y A+ son los m√°s frecuentes** en ambos g√©neros.")
    st.write("‚úÖ **Las donaciones de af√©resis siguen siendo minoritarias** respecto a sangre total.")
    st.write("‚ö†Ô∏è **Los grupos con Rh negativo siguen siendo escasos**, lo que puede ser un desaf√≠o en casos de urgencia.")

def lugar_conclusion():
     st.markdown("""
     #### Conclusiones
     - üì¢ **Las campa√±as** son la principal fuente de donaciones voluntarias, lo que las convierte en una estrategia clave para captar nuevos donantes.  
     - üè• **Las sedes** dependen en gran medida de donaciones por reposici√≥n, lo que sugiere que muchas personas donan solo cuando un familiar o conocido lo necesita.  
     - üìå **Los puestos fijos** presentan una baja participaci√≥n, lo que indica la necesidad de mayor promoci√≥n para aumentar la afluencia de donantes.  
     """)

def analisis_donantes():
    st.markdown("""
    ## üìä An√°lisis de Donantes seg√∫n Edad y Tipo de Donaci√≥n

    - üßë‚Äçüéì **Donantes de primera vez** tienden a ser m√°s j√≥venes, lo que sugiere que las campa√±as pueden estar atrayendo a nuevas generaciones.  
    - üîÑ **Donaciones por reposici√≥n y dirigidas** tienen una distribuci√≥n de edad m√°s amplia, lo que puede estar relacionado con la necesidad de donaci√≥n para familiares de distintas edades.  
    - üè• **Los donantes aut√≥logos** son escasos en la muestra y parecen agruparse en un rango de edad espec√≠fico.  
    - üîÅ **La promoci√≥n de la donaci√≥n voluntaria habitual** podr√≠a enfocarse en fidelizar a los donantes j√≥venes para convertirlos en habituales.  

    ### üîç **Conclusi√≥n**  
    Se observa que la edad de los donantes var√≠a seg√∫n el tipo de donaci√≥n, con una tendencia a que los donantes voluntarios y habituales sean de mediana edad, mientras que los donantes dirigidos presentan una mayor dispersi√≥n.  
    Esto podr√≠a ayudar a orientar estrategias de captaci√≥n y fidelizaci√≥n de donantes seg√∫n sus perfiles.
    """)

